# Construct SKOS mapping from Wikidata (plus linked Wikipedia pages)
#
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX stw: <http://zbw.eu/stw/descriptor/>
PREFIX schema: <http://schema.org/>
PREFIX zbwext: <http://zbw.eu/namespaces/zbw-extensions/>
#
construct {
  ?wd ?skosRelation ?stw .
  ?stw skos:prefLabel ?stwLabelLang .
  ?wd skos:prefLabel ?wdLabelLang .
  ?page schema:about ?wd ;
    schema:name ?name ;
    schema:isPartOf ?project .
}
where {
  service <https://query.wikidata.org/sparql> {
    # wd items with STW ID
    ?wd wdt:P3911 ?stwId .
    filter(isLiteral(?stwId))
    #
    # mapping relation (is required here!)
    ?wd p:P3911/pq:P4390 ?relation .
    # URL of the equivalent skos property
    ?relation wdt:P2699 ?skosRelation .
    #
    # get label for the wd item, if exists
    optional {
      ?wd rdfs:label ?wdLabelLang .
      filter(lang(?wdLabelLang) in ('en', 'de'))
    }
    ?page schema:about ?wd ;
          schema:name ?name ;
          schema:isPartOf ?project .
    filter(?project in (<https://de.wikipedia.org/>, <https://de.wikipedia.org/>))
  }
  # look up STW descriptors and labels
  bind(uri(concat('http://zbw.eu/stw/descriptor/', ?stwId)) as ?stw)
  ?stw skos:prefLabel ?stwLabelLang .
  filter(lang(?stwLabelLang) in ('en', 'de'))
  #
  # restrict for now to subthes G (geo)
  ?stw skos:broader ?thsys .
  ?thsys a zbwext:Thsys ;
         skos:notation ?nta .
  filter(strstarts(?nta, 'G'))
}
