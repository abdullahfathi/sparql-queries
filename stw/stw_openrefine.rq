# Create input for OpenRefine for STW descriptors
#
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX zbwext: <http://zbw.eu/namespaces/zbw-extensions/>
#
select ?id ?prefLabelDe ?prefLabelEn ?altLabelsDe ?altLabelsEn ?notesAndCategories
where {
  {
    select distinct ?id ?prefLabelDe ?prefLabelEn ?altLabelsDe ?altLabelsEn
    (concat(?descrElem, ' [', group_concat(str(?prefSysLang);
          separator = '; '), '] ') as ?notesAndCategories)
    (min(str(?prefSysLang)) as ?firstSys)
    where {
      ?stw a zbwext:Descriptor ;
           skos:broader ?thsys ;
           skos:prefLabel ?prefLangDe ;
           skos:prefLabel ?prefLangEn .
      ?thsys a zbwext:Thsys ;
             skos:notation ?nta ;
             skos:prefLabel ?prefSysLang .
      filter(lang(?prefLangDe) = 'de')
      filter(lang(?prefLangEn) = 'en')
      bind(str(?prefLangDe) as ?prefLabelDe)
      bind(str(?prefLangEn) as ?prefLabelEn)
      filter(lang(?prefSysLang) = 'en')
      #
      # selection by notation (G already covered by m-n-m #507)
      # (W already covered by m-n-m #1259)
      # (B covered by m-n-m #2917 - update?)
      # CAUTION: filter moved to "having" clause below!
      ##filter(strstarts(?nta, 'B.))
      #
      # build descriptor part of the description
      optional {
        select ?stw ( group_concat(str(?label);
            separator = ' | ') as ?descrElem)
        where {
          {
            ?stw skos:scopeNote ?label
          } union {
            ?stw skos:historyNote ?label
          } union {
            ?stw skos:editorialNote ?label
          }
          filter(lang(?label) = 'de')
        }
        group by ?stw
      }
      # build altLabels
      optional {
        select ?stw ( group_concat(str(?label);
            separator = ' | ') as ?altLabelsDe)
        where {
          ?stw skos:altLabel ?label
          filter(lang(?label) = 'de')
        }
        group by ?stw
      }
      optional {
        select ?stw ( group_concat(str(?label);
            separator = ' | ') as ?altLabelsEn)
        where {
          ?stw skos:altLabel ?label
          filter(lang(?label) = 'en')
        }
        group by ?stw
      }
      bind(strafter(str(?stw), 'http://zbw.eu/stw/descriptor/') as ?id)
    }
    group by ?id ?prefLabelDe ?prefLabelEn ?altLabelsDe ?altLabelsEn ?descrElem
    having (strstarts(?firstSys, 'B.01.01'))
  }
  #
  # exclude descriptors already mapped to Wikidata
  filter( not exists {
      service <https://query.wikidata.org/sparql> {
        ?wd wdt:P3911 ?id .
      }
    })
}
order by ?firstSys ?prefLabelDe

